name: CI

on:
  push:
    branches: [ main, develop, 'claude/**' ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  lint:
    name: Lint with Pylint
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dbus python3-gi gir1.2-glib-2.0

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Use requirements-ci.txt which excludes dbus packages (using system packages instead)
        if [ -f requirements-ci.txt ]; then pip install -r requirements-ci.txt; fi

    - name: Lint with pylint
      env:
        PYTHONPATH: /usr/lib/python3/dist-packages
      run: |
        pylint systemd_monitor/ --rcfile=.pylintrc --fail-under=10
        pylint tests/ --rcfile=.pylintrc --fail-under=10

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dbus python3-gi gir1.2-glib-2.0

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Use requirements-ci.txt which excludes dbus packages (using system packages instead)
        if [ -f requirements-ci.txt ]; then pip install -r requirements-ci.txt; fi

    - name: Run tests
      env:
        PYTHONPATH: /usr/lib/python3/dist-packages
      run: |
        pytest tests/ -v \
          --cov=systemd_monitor \
          --cov-report=xml \
          --cov-report=term-missing \
          --junitxml=junit/test-results-${{ matrix.python-version }}.xml

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: junit/test-results-${{ matrix.python-version }}.xml

    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: junit/test-results-${{ matrix.python-version }}.xml
        check_name: Test Results (Python ${{ matrix.python-version }})
        comment_mode: off

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dbus python3-gi gir1.2-glib-2.0

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Use requirements-ci.txt which excludes dbus packages (using system packages instead)
        if [ -f requirements-ci.txt ]; then pip install -r requirements-ci.txt; fi

    - name: Check formatting with black
      run: |
        black --check systemd_monitor/ tests/

    - name: Lint with flake8
      run: |
        flake8 systemd_monitor/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 systemd_monitor/ tests/ --count --max-complexity=10 --max-line-length=100 --statistics

    - name: Type check with mypy
      continue-on-error: true
      env:
        PYTHONPATH: /usr/lib/python3/dist-packages
      run: |
        mypy systemd_monitor/ --ignore-missing-imports

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test, code-quality]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        pip install twine
        twine check dist/*

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        # Skip requirements.txt - not needed for security scans

    - name: Run safety check
      continue-on-error: true
      run: |
        safety check --json

    - name: Run bandit security scan
      run: |
        bandit -r systemd_monitor/ -f json -o bandit-report.json || true
        bandit -r systemd_monitor/ -ll -i

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
